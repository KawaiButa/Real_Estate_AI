# type: ignore
"""Add description to property

Revision ID: b8a19e9520f4
Revises: 54266f582d3c
Create Date: 2025-03-30 15:25:31.621136

"""

import warnings
from typing import TYPE_CHECKING

import sqlalchemy as sa
from alembic import op
from advanced_alchemy.types import EncryptedString, EncryptedText, GUID, ORA_JSONB, DateTimeUTC
from sqlalchemy import Text  # noqa: F401

if TYPE_CHECKING:
    from collections.abc import Sequence

__all__ = ["downgrade", "upgrade", "schema_upgrades", "schema_downgrades", "data_upgrades", "data_downgrades"]

sa.GUID = GUID
sa.DateTimeUTC = DateTimeUTC
sa.ORA_JSONB = ORA_JSONB
sa.EncryptedString = EncryptedString
sa.EncryptedText = EncryptedText

# revision identifiers, used by Alembic.
revision = 'b8a19e9520f4'
down_revision = '54266f582d3c'
branch_labels = None
depends_on = None


def upgrade() -> None:
    with warnings.catch_warnings():
        warnings.filterwarnings("ignore", category=UserWarning)
        with op.get_context().autocommit_block():
            schema_upgrades()
            data_upgrades()

def downgrade() -> None:
    with warnings.catch_warnings():
        warnings.filterwarnings("ignore", category=UserWarning)
        with op.get_context().autocommit_block():
            data_downgrades()
            schema_downgrades()

def schema_upgrades() -> None:
    """schema upgrade migrations go here."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('articles',
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('title', sa.String(length=255), nullable=False),
    sa.Column('publish_date', sa.DateTime(timezone=True), nullable=False),
    sa.Column('content', sa.String(), nullable=False),
    sa.Column('short_description', sa.String(length=255), nullable=False),
    sa.Column('author', sa.String(length=255), nullable=False),
    sa.Column('created_at', sa.DateTime(timezone=True), nullable=False),
    sa.Column('updated_at', sa.DateTime(timezone=True), nullable=False),
    sa.PrimaryKeyConstraint('id', name=op.f('pk_articles')),
    sa.UniqueConstraint('id'),
    sa.UniqueConstraint('id', name=op.f('uq_articles_id'))
    )
    op.create_table('article_tags',
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('article_id', sa.UUID(), nullable=False),
    sa.Column('tag_id', sa.UUID(), nullable=False),
    sa.Column('created_at', sa.DateTime(timezone=True), nullable=False),
    sa.Column('updated_at', sa.DateTime(timezone=True), nullable=False),
    sa.ForeignKeyConstraint(['article_id'], ['articles.id'], name=op.f('fk_article_tags_article_id_articles'), ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['tag_id'], ['tags.id'], name=op.f('fk_article_tags_tag_id_tags'), ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id', name=op.f('pk_article_tags')),
    sa.UniqueConstraint('id'),
    sa.UniqueConstraint('id', name=op.f('uq_article_tags_id'))
    )
    with op.batch_alter_table('addresses', schema=None) as batch_op:
        batch_op.create_unique_constraint(batch_op.f('uq_addresses_id'), ['id'])

    with op.batch_alter_table('favorites', schema=None) as batch_op:
        batch_op.create_unique_constraint(batch_op.f('uq_favorites_id'), ['id'])

    with op.batch_alter_table('image_tags', schema=None) as batch_op:
        batch_op.create_unique_constraint(batch_op.f('uq_image_tags_id'), ['id'])

    with op.batch_alter_table('images', schema=None) as batch_op:
        batch_op.create_unique_constraint(batch_op.f('uq_images_id'), ['id'])

    with op.batch_alter_table('partner_registrations', schema=None) as batch_op:
        batch_op.create_unique_constraint(batch_op.f('uq_partner_registrations_id'), ['id'])

    with op.batch_alter_table('properties', schema=None) as batch_op:
        batch_op.add_column(sa.Column('description', sa.String(), nullable=False))
        batch_op.create_unique_constraint(batch_op.f('uq_properties_id'), ['id'])

    with op.batch_alter_table('property_tags', schema=None) as batch_op:
        batch_op.create_unique_constraint(batch_op.f('uq_property_tags_id'), ['id'])

    with op.batch_alter_table('roles', schema=None) as batch_op:
        batch_op.create_unique_constraint(batch_op.f('uq_roles_id'), ['id'])

    with op.batch_alter_table('tags', schema=None) as batch_op:
        batch_op.create_unique_constraint(batch_op.f('uq_tags_id'), ['id'])

    with op.batch_alter_table('user_tags', schema=None) as batch_op:
        batch_op.create_unique_constraint(batch_op.f('uq_user_tags_id'), ['id'])

    with op.batch_alter_table('users', schema=None) as batch_op:
        batch_op.create_unique_constraint(batch_op.f('uq_users_id'), ['id'])

    # ### end Alembic commands ###

def schema_downgrades() -> None:
    """schema downgrade migrations go here."""
    # ### commands auto generated by Alembic - please adjust! ###
    with op.batch_alter_table('users', schema=None) as batch_op:
        batch_op.drop_constraint(batch_op.f('uq_users_id'), type_='unique')

    with op.batch_alter_table('user_tags', schema=None) as batch_op:
        batch_op.drop_constraint(batch_op.f('uq_user_tags_id'), type_='unique')

    with op.batch_alter_table('tags', schema=None) as batch_op:
        batch_op.drop_constraint(batch_op.f('uq_tags_id'), type_='unique')

    with op.batch_alter_table('roles', schema=None) as batch_op:
        batch_op.drop_constraint(batch_op.f('uq_roles_id'), type_='unique')

    with op.batch_alter_table('property_tags', schema=None) as batch_op:
        batch_op.drop_constraint(batch_op.f('uq_property_tags_id'), type_='unique')

    with op.batch_alter_table('properties', schema=None) as batch_op:
        batch_op.drop_constraint(batch_op.f('uq_properties_id'), type_='unique')
        batch_op.drop_column('description')

    with op.batch_alter_table('partner_registrations', schema=None) as batch_op:
        batch_op.drop_constraint(batch_op.f('uq_partner_registrations_id'), type_='unique')

    with op.batch_alter_table('images', schema=None) as batch_op:
        batch_op.drop_constraint(batch_op.f('uq_images_id'), type_='unique')

    with op.batch_alter_table('image_tags', schema=None) as batch_op:
        batch_op.drop_constraint(batch_op.f('uq_image_tags_id'), type_='unique')

    with op.batch_alter_table('favorites', schema=None) as batch_op:
        batch_op.drop_constraint(batch_op.f('uq_favorites_id'), type_='unique')

    with op.batch_alter_table('addresses', schema=None) as batch_op:
        batch_op.drop_constraint(batch_op.f('uq_addresses_id'), type_='unique')

    op.create_table('spatial_ref_sys',
    sa.Column('srid', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('auth_name', sa.VARCHAR(length=256), autoincrement=False, nullable=True),
    sa.Column('auth_srid', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('srtext', sa.VARCHAR(length=2048), autoincrement=False, nullable=True),
    sa.Column('proj4text', sa.VARCHAR(length=2048), autoincrement=False, nullable=True),
    sa.CheckConstraint('srid > 0 AND srid <= 998999', name='spatial_ref_sys_srid_check'),
    sa.PrimaryKeyConstraint('srid', name='spatial_ref_sys_pkey')
    )
    op.drop_table('article_tags')
    op.drop_table('articles')
    # ### end Alembic commands ###

def data_upgrades() -> None:
    """Add any optional data upgrade migrations here!"""

def data_downgrades() -> None:
    """Add any optional data downgrade migrations here!"""
