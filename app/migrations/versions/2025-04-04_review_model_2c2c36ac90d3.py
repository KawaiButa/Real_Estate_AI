# type: ignore
"""review model

Revision ID: 2c2c36ac90d3
Revises: 4f7db0245311
Create Date: 2025-04-04 22:27:29.078365

"""

import warnings
from typing import TYPE_CHECKING

import sqlalchemy as sa
from alembic import op
from advanced_alchemy.types import EncryptedString, EncryptedText, GUID, ORA_JSONB, DateTimeUTC
from sqlalchemy import Text  # noqa: F401

if TYPE_CHECKING:
    from collections.abc import Sequence

__all__ = ["downgrade", "upgrade", "schema_upgrades", "schema_downgrades", "data_upgrades", "data_downgrades"]

sa.GUID = GUID
sa.DateTimeUTC = DateTimeUTC
sa.ORA_JSONB = ORA_JSONB
sa.EncryptedString = EncryptedString
sa.EncryptedText = EncryptedText

# revision identifiers, used by Alembic.
revision = '2c2c36ac90d3'
down_revision = '4f7db0245311'
branch_labels = None
depends_on = None


def upgrade() -> None:
    with warnings.catch_warnings():
        warnings.filterwarnings("ignore", category=UserWarning)
        with op.get_context().autocommit_block():
            schema_upgrades()
            data_upgrades()

def downgrade() -> None:
    with warnings.catch_warnings():
        warnings.filterwarnings("ignore", category=UserWarning)
        with op.get_context().autocommit_block():
            data_downgrades()
            schema_downgrades()

def schema_upgrades() -> None:
    """schema upgrade migrations go here."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table(
        'property_verifications',
        sa.Column('id', sa.UUID(), nullable=False),
        sa.Column('property_id', sa.UUID(), nullable=False),
        sa.Column('user_id', sa.UUID(), nullable=False),
        sa.Column('verification_method', sa.String(length=50), nullable=False),
        sa.Column('verification_code', sa.String(length=100), nullable=False),
        sa.Column('created_at', sa.DateTime(timezone=True), nullable=False),
        sa.Column('updated_at', sa.DateTime(timezone=True), nullable=False),
        sa.PrimaryKeyConstraint('id', name=op.f('pk_property_verifications')),
        sa.UniqueConstraint('id', name=op.f('uq_property_verifications_id')),
        sa.ForeignKeyConstraint(
            ['property_id'],
            ['properties.id'],
            name=op.f('fk_property_verifications_property_id_properties'),
            ondelete='CASCADE'
        ),
        sa.ForeignKeyConstraint(
            ['user_id'],
            ['users.id'],
            name=op.f('fk_property_verifications_user_id_users'),
            ondelete='CASCADE'
        ),
        sa.Index(
            'ix_verification_user_property',
            'user_id', 'property_id'
        )
    )
    op.create_table('reviews',
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('property_id', sa.UUID(), nullable=False),
    sa.Column('reviewer_id', sa.UUID(), nullable=True),
    sa.Column('rating', sa.Integer(), nullable=False),
    sa.Column('review_text', sa.String(length=2000), nullable=False),
    sa.Column('helpful_count', sa.Integer(), nullable=False),
    sa.Column('featured', sa.Boolean(), nullable=False),
    sa.Column('created_at', sa.DateTime(timezone=True), nullable=False),
    sa.Column('updated_at', sa.DateTime(timezone=True), nullable=False),
    sa.CheckConstraint('rating >= 1 AND rating <= 5', name=op.f('ck_reviews_rating_range_check')),
    sa.ForeignKeyConstraint(['property_id'], ['properties.id'], name=op.f('fk_reviews_property_id_properties'), ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['reviewer_id'], ['users.id'], name=op.f('fk_reviews_reviewer_id_users'), ondelete='SET NULL'),
    sa.PrimaryKeyConstraint('id', name=op.f('pk_reviews')),
    sa.UniqueConstraint('id'),
    sa.UniqueConstraint('id', name=op.f('uq_reviews_id'))
    )
    with op.batch_alter_table('reviews', schema=None) as batch_op:
        batch_op.create_index(batch_op.f('ix_reviews_property_id'), ['property_id'], unique=False)

    op.create_table('helpful_votes',
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('review_id', sa.UUID(), nullable=False),
    sa.Column('voter_id', sa.UUID(), nullable=False),
    sa.Column('created_at', sa.DateTime(timezone=True), nullable=False),
    sa.Column('updated_at', sa.DateTime(timezone=True), nullable=False),
    sa.ForeignKeyConstraint(['review_id'], ['reviews.id'], name=op.f('fk_helpful_votes_review_id_reviews'), ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['voter_id'], ['users.id'], name=op.f('fk_helpful_votes_voter_id_users'), ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id', name=op.f('pk_helpful_votes')),
    sa.UniqueConstraint('id'),
    sa.UniqueConstraint('id', name=op.f('uq_helpful_votes_id'))
    )
    op.create_table('review_medias',
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('review_id', sa.UUID(), nullable=False),
    sa.Column('media_url', sa.String(length=500), nullable=False),
    sa.Column('media_type', sa.String(length=20), nullable=False),
    sa.Column('created_at', sa.DateTime(timezone=True), nullable=False),
    sa.Column('updated_at', sa.DateTime(timezone=True), nullable=False),
    sa.ForeignKeyConstraint(['review_id'], ['reviews.id'], name=op.f('fk_review_medias_review_id_reviews'), ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id', name=op.f('pk_review_medias')),
    sa.UniqueConstraint('id'),
    sa.UniqueConstraint('id', name=op.f('uq_review_medias_id'))
    )
    op.create_table('review_responses',
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('review_id', sa.UUID(), nullable=False),
    sa.Column('response_text', sa.String(length=2000), nullable=False),
    sa.Column('created_at', sa.DateTime(timezone=True), nullable=False),
    sa.Column('updated_at', sa.DateTime(timezone=True), nullable=False),
    sa.ForeignKeyConstraint(['review_id'], ['reviews.id'], name=op.f('fk_review_responses_review_id_reviews'), ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id', name=op.f('pk_review_responses')),
    sa.UniqueConstraint('id'),
    sa.UniqueConstraint('id', name=op.f('uq_review_responses_id'))
    )
    with op.batch_alter_table('article_tags', schema=None) as batch_op:
        batch_op.create_unique_constraint(batch_op.f('uq_article_tags_id'), ['id'])

    with op.batch_alter_table('articles', schema=None) as batch_op:
        batch_op.create_unique_constraint(batch_op.f('uq_articles_id'), ['id'])

    with op.batch_alter_table('properties', schema=None) as batch_op:
        batch_op.add_column(sa.Column('average_rating', sa.Numeric(precision=3, scale=2, asdecimal=False), server_default='0.00', nullable=False))
        batch_op.alter_column('sqm',
               existing_type=sa.NUMERIC(precision=6, scale=2),
               nullable=False)

    with op.batch_alter_table('property_types', schema=None) as batch_op:
        batch_op.create_unique_constraint(batch_op.f('uq_property_types_id'), ['id'])

    with op.batch_alter_table('property_verifications', schema=None) as batch_op:
        batch_op.create_unique_constraint(batch_op.f('uq_property_verifications_id'), ['id'])

    # ### end Alembic commands ###

def schema_downgrades() -> None:
    """schema downgrade migrations go here."""
    # ### commands auto generated by Alembic - please adjust! ###
    with op.batch_alter_table('property_verifications', schema=None) as batch_op:
        batch_op.drop_constraint(batch_op.f('uq_property_verifications_id'), type_='unique')

    with op.batch_alter_table('property_types', schema=None) as batch_op:
        batch_op.drop_constraint(batch_op.f('uq_property_types_id'), type_='unique')

    with op.batch_alter_table('properties', schema=None) as batch_op:
        batch_op.alter_column('sqm',
               existing_type=sa.NUMERIC(precision=6, scale=2),
               nullable=True)
        batch_op.drop_column('average_rating')

    with op.batch_alter_table('articles', schema=None) as batch_op:
        batch_op.drop_constraint(batch_op.f('uq_articles_id'), type_='unique')

    with op.batch_alter_table('article_tags', schema=None) as batch_op:
        batch_op.drop_constraint(batch_op.f('uq_article_tags_id'), type_='unique')

    op.create_table('spatial_ref_sys',
    sa.Column('srid', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('auth_name', sa.VARCHAR(length=256), autoincrement=False, nullable=True),
    sa.Column('auth_srid', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('srtext', sa.VARCHAR(length=2048), autoincrement=False, nullable=True),
    sa.Column('proj4text', sa.VARCHAR(length=2048), autoincrement=False, nullable=True),
    sa.CheckConstraint('srid > 0 AND srid <= 998999', name='spatial_ref_sys_srid_check'),
    sa.PrimaryKeyConstraint('srid', name='spatial_ref_sys_pkey')
    )
    op.drop_table('review_responses')
    op.drop_table('review_medias')
    op.drop_table('helpful_votes')
    with op.batch_alter_table('reviews', schema=None) as batch_op:
        batch_op.drop_index(batch_op.f('ix_reviews_property_id'))

    op.drop_table('reviews')
    # ### end Alembic commands ###

def data_upgrades() -> None:
    """Add any optional data upgrade migrations here!"""

def data_downgrades() -> None:
    """Add any optional data downgrade migrations here!"""
