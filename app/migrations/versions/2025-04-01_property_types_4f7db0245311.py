# type: ignore
"""Property_types

Revision ID: 4f7db0245311
Revises: b8a19e9520f4
Create Date: 2025-04-01 10:13:10.162916

"""

import warnings
from typing import TYPE_CHECKING

import sqlalchemy as sa
from alembic import op
from advanced_alchemy.types import (
    EncryptedString,
    EncryptedText,
    GUID,
    ORA_JSONB,
    DateTimeUTC,
)
from sqlalchemy import Text  # noqa: F401
import uuid
import datetime

if TYPE_CHECKING:
    from collections.abc import Sequence

__all__ = [
    "downgrade",
    "upgrade",
    "schema_upgrades",
    "schema_downgrades",
    "data_upgrades",
    "data_downgrades",
]

sa.GUID = GUID
sa.DateTimeUTC = DateTimeUTC
sa.ORA_JSONB = ORA_JSONB
sa.EncryptedString = EncryptedString
sa.EncryptedText = EncryptedText

# revision identifiers, used by Alembic.
revision = "4f7db0245311"
down_revision = "b8a19e9520f4"
branch_labels = None
depends_on = None


def upgrade() -> None:
    with warnings.catch_warnings():
        warnings.filterwarnings("ignore", category=UserWarning)
        with op.get_context().autocommit_block():
            schema_upgrades()
            data_upgrades()


def downgrade() -> None:
    with warnings.catch_warnings():
        warnings.filterwarnings("ignore", category=UserWarning)
        with op.get_context().autocommit_block():
            data_downgrades()
            schema_downgrades()


def schema_upgrades() -> None:
    """schema upgrade migrations go here."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table(
        "property_types",
        sa.Column("id", sa.UUID(), nullable=False),
        sa.Column("name", sa.String(length=50), nullable=False),
        sa.Column("slug", sa.String(length=100), nullable=False),
        sa.Column("created_at", sa.DateTime(timezone=True), nullable=False),
        sa.Column("updated_at", sa.DateTime(timezone=True), nullable=False),
        sa.PrimaryKeyConstraint("id", name=op.f("pk_property_types")),
        sa.UniqueConstraint("id"),
        sa.UniqueConstraint("id", name=op.f("uq_property_types_id")),
        sa.UniqueConstraint("name"),
        sa.UniqueConstraint("name", name=op.f("uq_property_types_name")),
        sa.UniqueConstraint("slug", name="uq_property_types_slug"),
    )
    with op.batch_alter_table("property_types", schema=None) as batch_op:
        batch_op.create_index("ix_property_types_slug_unique", ["slug"], unique=True)
    with op.batch_alter_table("properties", schema=None) as batch_op:
        batch_op.add_column(sa.Column('property_type_id', sa.UUID(), nullable=False))
        batch_op.create_foreign_key(
            batch_op.f("fk_properties_property_type_id_property_types"),
            "property_types",
            ["property_type_id"],
            ["id"],
            ondelete="CASCADE",
        )

    # ### end Alembic commands ###


def schema_downgrades() -> None:
    """schema downgrade migrations go here."""
    # ### commands auto generated by Alembic - please adjust! ###
    with op.batch_alter_table("properties", schema=None) as batch_op:
        batch_op.drop_constraint(
            batch_op.f("fk_properties_property_type_id_property_types"),
            type_="foreignkey",
        )
        batch_op.alter_column(
            "property_type_id", existing_type=sa.UUID(), nullable=True
        )

    with op.batch_alter_table("property_types", schema=None) as batch_op:
        batch_op.drop_index("ix_property_types_slug_unique")

    op.drop_table("property_types")
    # ### end Alembic commands ###


def data_upgrades() -> None:
    now = datetime.datetime.now(datetime.timezone.utc)
    """Add any optional data upgrade migrations here!"""
    property_types_table = sa.table(
        "property_types",
        sa.column("id", sa.UUID(as_uuid=True)),
        sa.column("slug", sa.String),
        sa.column("name", sa.String),
        sa.column("created_at", sa.DateTime(timezone=True)),
        sa.column("updated_at", sa.DateTime(timezone=True)),
    )
    op.bulk_insert(
        property_types_table,
        [
            {
                "id": uuid.uuid4(),
                "slug": category,
                "name": category,
                "created_at": now,
                "updated_at": now,
            }
            for category in VIETNAM_PROPERTY_CATEGORIES
        ],
    )


def data_downgrades() -> None:
    """Add any optional data downgrade migrations here!"""
    # Optionally, you might want to remove the inserted property types.
    for category in VIETNAM_PROPERTY_CATEGORIES:
        op.execute(
            sa.text("DELETE FROM property_types WHERE slug = :slug"), {"slug": category}
        )


VIETNAM_PROPERTY_CATEGORIES = [
    "apartment",
    "villa",
    "townhouse",
    "commercial",
    "land",
    "residential",
]
