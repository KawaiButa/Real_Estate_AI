# type: ignore
"""Add tag and image table

Revision ID: debb6656cef2
Revises: 582c91e24415
Create Date: 2025-03-27 16:16:32.920321

"""

import warnings
from typing import TYPE_CHECKING

import sqlalchemy as sa
from alembic import op
from advanced_alchemy.types import EncryptedString, EncryptedText, GUID, ORA_JSONB, DateTimeUTC
from sqlalchemy import Text  # noqa: F401

if TYPE_CHECKING:
    from collections.abc import Sequence

__all__ = ["downgrade", "upgrade", "schema_upgrades", "schema_downgrades", "data_upgrades", "data_downgrades"]

sa.GUID = GUID
sa.DateTimeUTC = DateTimeUTC
sa.ORA_JSONB = ORA_JSONB
sa.EncryptedString = EncryptedString
sa.EncryptedText = EncryptedText

# revision identifiers, used by Alembic.
revision = 'debb6656cef2'
down_revision = '582c91e24415'
branch_labels = None
depends_on = None


def upgrade() -> None:
    with warnings.catch_warnings():
        warnings.filterwarnings("ignore", category=UserWarning)
        with op.get_context().autocommit_block():
            schema_upgrades()
            data_upgrades()

def downgrade() -> None:
    with warnings.catch_warnings():
        warnings.filterwarnings("ignore", category=UserWarning)
        with op.get_context().autocommit_block():
            data_downgrades()
            schema_downgrades()

def schema_upgrades() -> None:
    """schema upgrade migrations go here."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('images',
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('url', sa.String(), nullable=False),
    sa.Column('model_id', sa.UUID(), nullable=True),
    sa.Column('model_type', sa.String(length=50), nullable=True),
    sa.Column('created_at', sa.DateTime(timezone=True), nullable=False),
    sa.Column('updated_at', sa.DateTime(timezone=True), nullable=False),
    sa.PrimaryKeyConstraint('id', name=op.f('pk_images')),
    sa.UniqueConstraint('id'),
    sa.UniqueConstraint('id', name=op.f('uq_images_id'))
    )
    op.create_table('tags',
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('name', sa.String(length=255), nullable=False),
    sa.Column('type', sa.String(length=255), nullable=True),
    sa.Column('slug', sa.String(length=100), nullable=False),
    sa.Column('created_at', sa.DateTime(timezone=True), nullable=False),
    sa.Column('updated_at', sa.DateTime(timezone=True), nullable=False),
    sa.PrimaryKeyConstraint('id', name=op.f('pk_tags')),
    sa.UniqueConstraint('id'),
    sa.UniqueConstraint('id', name=op.f('uq_tags_id')),
    sa.UniqueConstraint('name'),
    sa.UniqueConstraint('name', name=op.f('uq_tags_name')),
    sa.UniqueConstraint('slug', name='uq_tags_slug')
    )
    with op.batch_alter_table('tags', schema=None) as batch_op:
        batch_op.create_index('ix_tags_slug_unique', ['slug'], unique=True)

    op.create_table('image_tags',
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('image_id', sa.UUID(), nullable=False),
    sa.Column('tag_id', sa.UUID(), nullable=False),
    sa.Column('created_at', sa.DateTime(timezone=True), nullable=False),
    sa.Column('updated_at', sa.DateTime(timezone=True), nullable=False),
    sa.ForeignKeyConstraint(['image_id'], ['images.id'], name=op.f('fk_image_tags_image_id_images'), ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['tag_id'], ['tags.id'], name=op.f('fk_image_tags_tag_id_tags'), ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id', name=op.f('pk_image_tags')),
    sa.UniqueConstraint('id'),
    sa.UniqueConstraint('id', name=op.f('uq_image_tags_id'))
    )
    op.create_table('user_tags',
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('user_id', sa.UUID(), nullable=False),
    sa.Column('tag_id', sa.UUID(), nullable=False),
    sa.Column('created_at', sa.DateTime(timezone=True), nullable=False),
    sa.Column('updated_at', sa.DateTime(timezone=True), nullable=False),
    sa.ForeignKeyConstraint(['tag_id'], ['tags.id'], name=op.f('fk_user_tags_tag_id_tags')),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], name=op.f('fk_user_tags_user_id_users')),
    sa.PrimaryKeyConstraint('id', name=op.f('pk_user_tags')),
    sa.UniqueConstraint('id'),
    sa.UniqueConstraint('id', name=op.f('uq_user_tags_id'))
    )
    op.create_table('property_tags',
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('property_id', sa.UUID(), nullable=False),
    sa.Column('tag_id', sa.UUID(), nullable=False),
    sa.Column('created_at', sa.DateTime(timezone=True), nullable=False),
    sa.Column('updated_at', sa.DateTime(timezone=True), nullable=False),
    sa.ForeignKeyConstraint(['property_id'], ['properties.id'], name=op.f('fk_property_tags_property_id_properties'), ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['tag_id'], ['tags.id'], name=op.f('fk_property_tags_tag_id_tags'), ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id', name=op.f('pk_property_tags')),
    sa.UniqueConstraint('id'),
    sa.UniqueConstraint('id', name=op.f('uq_property_tags_id'))
    )
    with op.batch_alter_table('favorites', schema=None) as batch_op:
        batch_op.create_unique_constraint(batch_op.f('uq_favorites_id'), ['id'])

    with op.batch_alter_table('partner_registrations', schema=None) as batch_op:
        batch_op.add_column(sa.Column('profile_image_id', sa.UUID(), nullable=True))
        batch_op.create_foreign_key(batch_op.f('fk_partner_registrations_profile_image_id_images'), 'images', ['profile_image_id'], ['id'], ondelete='SET NULL')
        batch_op.drop_column('business_registration_certificate_url')
        batch_op.drop_column('profile_url')

    with op.batch_alter_table('users', schema=None) as batch_op:
        batch_op.add_column(sa.Column('image_id', sa.UUID(), nullable=True))
        batch_op.create_unique_constraint(batch_op.f('uq_users_image_id'), ['image_id'])
        batch_op.create_foreign_key(batch_op.f('fk_users_image_id_images'), 'images', ['image_id'], ['id'], ondelete='SET NULL')

    # ### end Alembic commands ###

def schema_downgrades() -> None:
    """schema downgrade migrations go here."""
    # ### commands auto generated by Alembic - please adjust! ###
    with op.batch_alter_table('users', schema=None) as batch_op:
        batch_op.drop_constraint(batch_op.f('fk_users_image_id_images'), type_='foreignkey')
        batch_op.drop_constraint(batch_op.f('uq_users_image_id'), type_='unique')
        batch_op.drop_column('image_id')

    with op.batch_alter_table('partner_registrations', schema=None) as batch_op:
        batch_op.add_column(sa.Column('profile_url', sa.VARCHAR(length=255), autoincrement=False, nullable=True))
        batch_op.add_column(sa.Column('business_registration_certificate_url', sa.VARCHAR(length=255), autoincrement=False, nullable=True))
        batch_op.drop_constraint(batch_op.f('fk_partner_registrations_profile_image_id_images'), type_='foreignkey')
        batch_op.drop_column('profile_image_id')

    with op.batch_alter_table('favorites', schema=None) as batch_op:
        batch_op.drop_constraint(batch_op.f('uq_favorites_id'), type_='unique')

    op.create_table('spatial_ref_sys',
    sa.Column('srid', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('auth_name', sa.VARCHAR(length=256), autoincrement=False, nullable=True),
    sa.Column('auth_srid', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('srtext', sa.VARCHAR(length=2048), autoincrement=False, nullable=True),
    sa.Column('proj4text', sa.VARCHAR(length=2048), autoincrement=False, nullable=True),
    sa.CheckConstraint('srid > 0 AND srid <= 998999', name='spatial_ref_sys_srid_check'),
    sa.PrimaryKeyConstraint('srid', name='spatial_ref_sys_pkey')
    )
    op.drop_table('property_tags')
    op.drop_table('user_tags')
    op.drop_table('image_tags')
    with op.batch_alter_table('tags', schema=None) as batch_op:
        batch_op.drop_index('ix_tags_slug_unique')

    op.drop_table('tags')
    op.drop_table('images')
    # ### end Alembic commands ###

def data_upgrades() -> None:
    """Add any optional data upgrade migrations here!"""

def data_downgrades() -> None:
    """Add any optional data downgrade migrations here!"""
