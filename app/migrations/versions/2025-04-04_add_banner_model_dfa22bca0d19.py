# type: ignore
"""Add banner model

Revision ID: dfa22bca0d19
Revises: 2c2c36ac90d3
Create Date: 2025-04-04 23:29:04.655283

"""

import warnings
from typing import TYPE_CHECKING

import sqlalchemy as sa
from alembic import op
from advanced_alchemy.types import EncryptedString, EncryptedText, GUID, ORA_JSONB, DateTimeUTC
from sqlalchemy import Text  # noqa: F401

if TYPE_CHECKING:
    from collections.abc import Sequence

__all__ = ["downgrade", "upgrade", "schema_upgrades", "schema_downgrades", "data_upgrades", "data_downgrades"]

sa.GUID = GUID
sa.DateTimeUTC = DateTimeUTC
sa.ORA_JSONB = ORA_JSONB
sa.EncryptedString = EncryptedString
sa.EncryptedText = EncryptedText

# revision identifiers, used by Alembic.
revision = 'dfa22bca0d19'
down_revision = '2c2c36ac90d3'
branch_labels = None
depends_on = None


def upgrade() -> None:
    with warnings.catch_warnings():
        warnings.filterwarnings("ignore", category=UserWarning)
        with op.get_context().autocommit_block():
            schema_upgrades()
            data_upgrades()

def downgrade() -> None:
    with warnings.catch_warnings():
        warnings.filterwarnings("ignore", category=UserWarning)
        with op.get_context().autocommit_block():
            data_downgrades()
            schema_downgrades()

def schema_upgrades() -> None:
    """schema upgrade migrations go here."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('banners',
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('title', sa.String(), nullable=True),
    sa.Column('url', sa.String(), nullable=False),
    sa.Column('content', sa.String(), nullable=False),
    sa.Column('created_at', sa.DateTime(timezone=True), nullable=False),
    sa.Column('updated_at', sa.DateTime(timezone=True), nullable=False),
    sa.PrimaryKeyConstraint('id', name=op.f('pk_banners')),
    sa.UniqueConstraint('id'),
    sa.UniqueConstraint('id', name=op.f('uq_banners_id'))
    )
    with op.batch_alter_table('helpful_votes', schema=None) as batch_op:
        batch_op.create_unique_constraint(batch_op.f('uq_helpful_votes_id'), ['id'])

    with op.batch_alter_table('review_medias', schema=None) as batch_op:
        batch_op.create_unique_constraint(batch_op.f('uq_review_medias_id'), ['id'])

    with op.batch_alter_table('review_responses', schema=None) as batch_op:
        batch_op.create_unique_constraint(batch_op.f('uq_review_responses_id'), ['id'])

    with op.batch_alter_table('reviews', schema=None) as batch_op:
        batch_op.create_unique_constraint(batch_op.f('uq_reviews_id'), ['id'])

    # ### end Alembic commands ###

def schema_downgrades() -> None:
    """schema downgrade migrations go here."""
    # ### commands auto generated by Alembic - please adjust! ###
    with op.batch_alter_table('reviews', schema=None) as batch_op:
        batch_op.drop_constraint(batch_op.f('uq_reviews_id'), type_='unique')

    with op.batch_alter_table('review_responses', schema=None) as batch_op:
        batch_op.drop_constraint(batch_op.f('uq_review_responses_id'), type_='unique')

    with op.batch_alter_table('review_medias', schema=None) as batch_op:
        batch_op.drop_constraint(batch_op.f('uq_review_medias_id'), type_='unique')

    with op.batch_alter_table('helpful_votes', schema=None) as batch_op:
        batch_op.drop_constraint(batch_op.f('uq_helpful_votes_id'), type_='unique')

    op.create_table('spatial_ref_sys',
    sa.Column('srid', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('auth_name', sa.VARCHAR(length=256), autoincrement=False, nullable=True),
    sa.Column('auth_srid', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('srtext', sa.VARCHAR(length=2048), autoincrement=False, nullable=True),
    sa.Column('proj4text', sa.VARCHAR(length=2048), autoincrement=False, nullable=True),
    sa.CheckConstraint('srid > 0 AND srid <= 998999', name='spatial_ref_sys_srid_check'),
    sa.PrimaryKeyConstraint('srid', name='spatial_ref_sys_pkey')
    )
    op.drop_table('banners')
    # ### end Alembic commands ###

def data_upgrades() -> None:
    """Add any optional data upgrade migrations here!"""

def data_downgrades() -> None:
    """Add any optional data downgrade migrations here!"""
